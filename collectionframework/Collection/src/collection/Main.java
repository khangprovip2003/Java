package collection;


import java.util.*;

public class Main {
    public static void main(String[] args) {
        // r√°p menu c·∫£m gi√°c 1 c√°i app
        Scanner sc = new Scanner(System.in);
        int c = 100;
        printMenuMain();
        while (c != 0) {
            System.out.print("Option : ");
            try {
                c = Integer.parseInt(sc.nextLine());
                switch (c) {
                    case 1:
                        sort();
                        break;
                    case 2:
                        reverse();
                        break;
                    case 3:
                        shuffle();
                        break;
                    case 4:
                        binarySearch();
                        break;
                    case 5:
                        max();
                        break;
                    case 6:
                        maxComparator();
                        break;
                    case 7:
                        fill();
                        break;
                    case 8:
                        addAll();
                        break;
                    case 9:
                        disjoint();
                        break;
                    case 10:
                        frequency();
                        break;
                    case 11:
                        indexOfSubList();
                        break;
                    case 12:
                        copy();
                        break;
                    case 13:
                        nCopies();
                        break;
                    case 0:
                        System.out.println("BYE BYE üòë");
                        break;
                    default:
                        System.out.println("Please choose true option!!!");
                        break;
                }
            } catch (Exception e) {
                System.out.println("Do you know how to input a positive number?");
            }
        }
    }


    public static void printMenuMain() {
        System.out.println("[1]. sort(List<T> list)");
        System.out.println("[2].reverse(List<?> list)");
        System.out.println("[3]. shuffle(List<?> list)");
        System.out.println("[4].binarySearch(List<? extends Comparable<? super T>> list, T key)");
        System.out.println("[5]. max(Collection<? extends T> coll)");
        System.out.println("[6]. max(Collection<? extends T> coll, Comparator<? super T> comp)");
        System.out.println("[7].fill(List<? super T> list, T obj)");
        System.out.println("[8].addAll(Collection<? super T> c, T... elements)");
        System.out.println("[9].disjoint(Collection<?> c1, Collection<?> c2)");
        System.out.println("[10].frequency(Collection<?> c, Object o)");
        System.out.println("[11].indexOfSubList(List<?> source, List<?> target)");
        System.out.println("[12]. copy(List<? super T> dest, List<? extends T> src)");
        System.out.println("[13]. nCopies(int n, T o)");
        System.out.println("[0].Exit");
    }
// Ph∆∞∆°ng th·ª©c asList() l√† ph∆∞∆°ng th·ª©c static trong Array. Ph∆∞∆°ng th∆∞c chuy·ªÉn ƒë·ªïi m·ªôt m·∫£ng c√°c ph·∫ßn t·ª≠ th√†nh m·ªôt danh s√°ch
    public static void reverse(){
        //Ph∆∞∆°ng th·ª©c reverse(List<?> list) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c th·ª© t·ª± c√°c ph·∫ßn t·ª≠ trong m·ªôt danh s√°ch.
        List<String> words = new ArrayList<>();
        words.add("apple");
        words.add("banana");
        words.add("cherry");
        Collections.reverse(words);
        System.out.println(words); // [cherry, banana, apple]
    }
    public static void sort() {
    //Ph∆∞∆°ng th·ª©c sort(List<T> list) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ s·∫Øp x·∫øp c√°c ph·∫ßn t·ª≠ trong m·ªôt danh s√°ch theo th·ª© t·ª± tƒÉng d·∫ßn.
        List<Integer> numbers = new ArrayList<>();
        numbers.add(3);
        numbers.add(1);
        numbers.add(4);
        numbers.add(2);
        Collections.sort(numbers);
        System.out.println(numbers); // [1, 2, 3, 4]
    }
    public static void shuffle(){
    //Ph∆∞∆°ng th·ª©c shuffle(List<?> list) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°o tr·ªôn c√°c ph·∫ßn t·ª≠ trong m·ªôt danh s√°ch theo th·ª© t·ª± ng·∫´u nhi√™n
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        Collections.shuffle(numbers);
        System.out.println(numbers); // [3, 1, 2, 4] (k·∫øt qu·∫£ s·∫Ω kh√°c nhau ·ªü m·ªói l·∫ßn ch·∫°y)

    }
    public static void binarySearch(){
    //Ph∆∞∆°ng th·ª©c binarySearch(List<? extends Comparable<? super T>> list, T key) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ki·∫øm ph·∫ßn t·ª≠
        // c√≥ gi√° tr·ªã b·∫±ng key trong m·ªôt danh s√°ch ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        int index = Collections.binarySearch(numbers, 3);
        System.out.println(index); // 2

    }

    public static void max(){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        numbers.add(4);
        int max = Collections.max(numbers);
        System.out.println(max); // 4
    }
    public static void maxComparator(){
        List<Integer> numbers = new ArrayList<>();
        numbers.add(3);
        numbers.add(7);
        numbers.add(1);
        numbers.add(9);
    //    Comparator.naturalOrder() ƒë·ªÉ so s√°nh c√°c s·ªë nguy√™n trong t·∫≠p h·ª£p.
                Comparator<Integer> comparator = Comparator.naturalOrder();
        Integer maxNumber = Collections.max(numbers, comparator); // returns 9
    //L∆∞u √Ω r·∫±ng n·∫øu t·∫≠p h·ª£p truy·ªÅn v√†o l√† r·ªóng th√¨ ph∆∞∆°ng th·ª©c max s·∫Ω n√©m ra m·ªôt ngo·∫°i l·ªá NoSuchElementException.
        // max(Collection<? extends T> coll) s·ª≠ d·ª•ng th·ª© t·ª± t·ª± nhi√™n c·ªßa c√°c ph·∫ßn t·ª≠ ƒë·ªÉ t√¨m ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã l·ªõn nh·∫•t, trong khi ph∆∞∆°ng th·ª©c
//max(Collection<? extends T> coll, Comparator<? super T> comp) cho ph√©p b·∫°n ch·ªâ ƒë·ªãnh m·ªôt tr√¨nh so s√°nh t√πy ch·ªânh
// ƒë·ªÉ s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã l·ªõn nh·∫•t.
// min sample max

    }

    public static void fill(){
    //Ph∆∞∆°ng th·ª©c fill(List<? super T> list, T obj) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thay ƒë·ªïi t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ trong m·ªôt danh s√°ch th√†nh m·ªôt gi√° tr·ªã m·ªõi.
        List<String> words = new ArrayList<>();
        words.add("apple");
        words.add("banana");
        words.add("cherry");
        Collections.fill(words, "orange");
        System.out.println(words); // [orange, orange, orange]

    }

    public static void addAll(){
      //  Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th√™m t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√†o m·ªôt t·∫≠p h·ª£p
        List<Integer> list = new ArrayList<>();
        list.add(12);
        Collections.addAll(list, 1, 2, 3, 4, 5);
        System.out.println(list); // Output: [12, 1, 2, 3, 4, 5]
    }

    public static void disjoint(){
    //Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra xem hai t·∫≠p h·ª£p c√≥ giao nhau hay kh√¥ng ( true/ false)
    //N·∫øu kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o chung gi·ªØa hai t·∫≠p h·ª£p, ph∆∞∆°ng th·ª©c s·∫Ω tr·∫£ v·ªÅ true. Ng∆∞·ª£c l·∫°i, n√≥ s·∫Ω tr·∫£ v·ªÅ false.
        List<Integer> list1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5));
        List<Integer> list2 = new ArrayList<>(Arrays.asList(6, 7, 8, 9, 10));
        List<Integer> list3 = new ArrayList<>(Arrays.asList(3, 4, 5, 6, 7));

        System.out.println(Collections.disjoint(list1, list2)); // Output: true
        System.out.println(Collections.disjoint(list1, list3)); // Output: false
    }
    public static void frequency(){
    //Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªôt ph·∫ßn t·ª≠ trong t·∫≠p h·ª£p
    //Tham s·ªë ƒë·∫ßu ti√™n l√† t·∫≠p h·ª£p c·∫ßn ƒë∆∞·ª£c ƒë·∫øm, tham s·ªë th·ª© hai l√† ph·∫ßn t·ª≠ c·∫ßn ƒë∆∞·ª£c ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán.
        List<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3, 2, 1, 2, 3, 4, 5));
        System.out.println(Collections.frequency(list, 2)); // Output: 3
        System.out.println(Collections.frequency(list, 6)); // Output: 0
    }

    public static void indexOfSubList(){
    //Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√¨m ch·ªâ s·ªë ƒë·∫ßu ti√™n c·ªßa danh s√°ch target trong danh s√°ch source
    //N·∫øu kh√¥ng t√¨m th·∫•y danh s√°ch target trong danh s√°ch source, ph∆∞∆°ng th·ª©c s·∫Ω tr·∫£ v·ªÅ -1.
        List<Integer> source = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6));
        List<Integer> target1 = new ArrayList<>(Arrays.asList(3, 4, 5));
        List<Integer> target2 = new ArrayList<>(Arrays.asList(6, 7, 8));

        System.out.println(Collections.indexOfSubList(source, target1)); // Output: 2
        System.out.println(Collections.indexOfSubList(source, target2)); // Output: -1

    }

    public static void copy(){
    // sao ch√©p t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ t·ª´ danh s√°ch src sang danh s√°ch dest.
        List<String> sourceList = new ArrayList<>();
        sourceList.add("apple");
        sourceList.add("banana");
        sourceList.add("orange");

        List<String> destList = new ArrayList<>();
        destList.add("grape");
        destList.add("peach");
        destList.add("watermelon");

        Collections.copy(destList, sourceList);

        System.out.println(destList); //[apple, banana, orange]

    }

    public static void  nCopies(){
        //Ph∆∞∆°ng th·ª©c nCopies(int n, T o)
    //tr·∫£ v·ªÅ m·ªôt danh s√°ch bao g·ªìm n ph·∫ßn t·ª≠ c√≥ gi√° tr·ªã b·∫±ng o
        List<Integer> numberList = new ArrayList<>(Collections.nCopies(5, 10));

        System.out.println(numberList); //[10, 10, 10, 10, 10]


    }





}